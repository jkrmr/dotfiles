#!/usr/bin/env bash

# shellcheck disable=SC1090
# SC1090: Can't follow non-constant source.
#         Use a directive to specify location.

set -x

timestamp="$(date +%s)"
export BOOTSTRAP_LOG_PATH="$HOME/Desktop/bootstrap-$timestamp.log"
touch "$BOOTSTRAP_LOG_PATH"

export LOCAL_DOTFILES="$HOME/.dotfiles"
export SYNCED="$HOME/Dropbox/Sync"

step() {
  echo && echo "$1 ..."
}

(
  step "Cloning dotfiles"
  if [ ! -d "$LOCAL_DOTFILES" ]; then
    git clone --recursive \
      https://github.com/jmromer/dotfiles.git \
      "$LOCAL_DOTFILES" 1> /dev/null
  fi

  step "Cloning emacs config repo"
  if [ ! -d "$HOME/.emacs.d" ]; then
    git clone --branch=develop \
      https://github.com/syl20bnr/spacemacs \
      "${HOME}/.emacs.d"
  fi

  step "Installing or updating Homebrew"
  brew_installed="$(command -v brew >/dev/null)"
  if [[ -z "$brew_installed" ]]; then
    sh -c "$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)"
  else
    brew update
  fi

  step "Installing apt packages"
  source "$HOME/.dotfiles/bootstrap/packages-apt.sh"

  step "Installing linuxbrew packages"
  source "$HOME/.dotfiles/bootstrap/packages-brew.sh"
  source "$HOME/.dotfiles/bootstrap/packages-brew.linux.sh"

  step "Installing GNU tools"
  source "$HOME/.dotfiles/bootstrap/packages-gnu.sh"

  step "Setting zsh as the default shell"
  brew_prefix="$(brew --prefix)"
  echo "$brew_prefix/bin/bash" | sudo tee -a /etc/shells
  echo "$brew_prefix/bin/zsh" | sudo tee -a /etc/shells
  chsh -s "$brew_prefix/bin/zsh"

  step "Linking dotfiles into home directory"
  ln -s "$HOME/.dotfiles/rcrc" "$HOME/.rcrc"
  rcup

  mkdir "$HOME/.config"
  ln -s "$SYNCED/config/hub" "$HOME/.config/hub"
  ln -s "$SYNCED/config/git" "$HOME/.config/git"
  ln -s "$SYNCED/karabiner" "$HOME/.config/karabiner"

  step "Setting up asdf"
  . "$(brew --prefix asdf)/asdf.sh"
  . "$(brew --prefix asdf)/etc/bash_completion.d/asdf.bash"

  step "Setting Ruby compilation vars"
  . "$HOME/.ruby-build-vars"

  step "Installing Ruby"
  ruby_version="$(asdf list-all ruby | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$' | sort | tail -1)"
  if ! asdf versions ruby | grep -Fq "$ruby_version"; then
    step "Installing Ruby $ruby_version"
    asdf install ruby "$ruby_version"
    gem ctags

    step "Configuring Bundler"
    number_of_cores=$(sysctl -n hw.ncpu)
    bundle config --global jobs "$((number_of_cores - 1))"
  fi

  step "Creating ~/.ssh"
  mkdir "$HOME/.ssh"
  cp "${SYNCED}"/ssh/* "$HOME/.ssh"
  chmod 600 "$HOME"/.ssh/*

  step "Creating ~/.gnupg"
  gpg --list-keys
  cp -r "$SYNCED"/gnupg/* "$HOME/.gnupg"

  step "Creating terminfo entries"
  for file in "$HOME"/.dotfiles/terminfo/*; do
    echo tic "$file"
    tic "$file"
  done

  source "$HOME/.zshrc"

  echo "Installing tmux..."
  asdf plugin-add tmux
  tmux_version="$(asdf list-all tmux | tail -1)"
  asdf install tmux "$tmux_version"
  asdf global tmux "$tmux_version"

  echo "Installing node..."
  asdf plugin-add nodejs
  bash ~/.asdf/plugins/nodejs/bin/import-release-team-keyring
  node_version="$(asdf list-all nodejs | tail -1)"
  asdf install nodejs "$node_version"
  asdf global nodejs "$node_version"

  echo "Installing Python..."
  asdf plugin-add python
  asdf install python anaconda3-2019.07
  pip install pynvim
  pip2 install pynvim

  source "$HOME/.zshrc"
  conda create --name tf_gpu tensorflow-gpu

  echo "Installing Java..."
  asdf plugin-add java
  asdf install java openjdk-11

  step "Install Vim Packages"
  vim +PlugUpgrade +PlugUpdate +PlugInstall +UpdateRemotePlugins +qall

  step "Setup script is complete"
) | tee "$BOOTSTRAP_LOG_PATH"
