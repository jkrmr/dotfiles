#!/usr/bin/env bash

# bash_profile
# symlinked to by ~/.bash_profile

# shellcheck source=/dev/null
source "$HOME/.dotfiles/shell/env.sh"
source "$HOME/.dotfiles/shell/path.sh"

#-------------------------------------------------------------
# Aliases
#-------------------------------------------------------------
alias reload!="source ~/.bash_profile"
alias git="hub"

g() {
  if [[ $# > 0 ]]; then
    git $@
  else
    \git status -sb
  fi
}

#-------------------------------------------------------------
# COMMAND COMPLETION
#-------------------------------------------------------------
[[ -f "$HOMEBREW_PREFIX/etc/bash_completion" ]] && \
  . "$HOMEBREW_PREFIX/etc/bash_completion"

[[ -f "$HOMEBREW_PREFIX/opt/asdf/etc/bash_completion.d/asdf.bash" ]] && \
    . "$HOMEBREW_PREFIX/opt/asdf/etc/bash_completion.d/asdf.bash"

source "$HOME/.dotfiles/shell/git-completion.bash"
complete -C aws_completer aws

#-------------------------------------------------------------
# COLORS  # NB: wrapping incorrectly in bash
#-------------------------------------------------------------
color() {
  if   [[ $1 == 'red'    ]]; then echo -ne '\e[0;31m'   # $(tput setaf 1)
  elif [[ $1 == 'yellow' ]]; then echo -ne '\e[1;33m'   # $(tput setaf 3)
  elif [[ $1 == 'green'  ]]; then echo -ne '\e[0;32m'   # $(tput setaf 2)
  elif [[ $1 == 'violet' ]]; then echo -ne '\e[0;35m'   # $(tput setaf 5)
  elif [[ $1 == 'blue'   ]]; then echo -ne '\e[1;34m'   # $(tput setaf 4)
  elif [[ $1 == 'white'  ]]; then echo -ne '\e[0;31m'   # $(tput setaf 7)
  elif [[ $1 == 'reset'  ]]; then echo -ne '\e[0m'      # $(tput sgr0)
  fi
}

#-------------------------------------------------------------
# COLORIZED GIT PROMPT
#-------------------------------------------------------------
git_color() {
  local clean='working (directory|tree) clean'
  local ahead_of_remote="Your branch is ahead of"
  local applying_patch="Unmerged"

  if [[ $git_status =~ $clean ]]; then
    if [[ $git_status =~ $ahead_of_remote ]]; then
      echo -ne "$(color yellow)"
    else
      echo -ne "$(color green)"
    fi
  elif [[ $git_status =~ $applying_patch ]]; then
    echo -ne "$(color violet)"
  else
    echo -ne "$(color red)"
  fi
}

git_branch() {
  local git_status="$(\git status 2> /dev/null)"
  local is_on_branch='^On branch ([^[:space:]]+)'
  local is_on_commit='HEAD detached at ([^[:space:]]+)'
  local is_rebasing="rebasing branch '([^[:space:]]+)' on '([^[:space:]]+)'"

  if [[ $git_status =~ $is_on_branch ]]; then
    local branch=${BASH_REMATCH[1]:-${match[1]}} # bash/zsh portable
    if [[ $git_status =~ "Unmerged paths" ]]; then
      git_color && echo -n "merging into $branch "
    else
      git_color && echo -n "$branch "
    fi
  elif [[ $git_status =~ $is_on_commit ]]; then
    local commit=${BASH_REMATCH[1]:-${match[1]}}
    git_color && echo -n "$commit "
  elif [[ $git_status =~ $is_rebasing ]]; then
    local branch=${BASH_REMATCH[1]:-${match[1]}}
    local commit=${BASH_REMATCH[2]:-${match[2]}}
    git_color && echo -n "rebasing $branch on $commit "
  fi
}

#-------------------------------------------------------------
# PROMPT WITH SHORT PWD, COLORIZED GIT INFO
#-------------------------------------------------------------
PS1='\n$(color blue)\W '  # history #, basename of pwd
PS1+='$(git_branch)'      # prints current branch
PS1+='$(color reset)\$ '  # resets color and prints $ or #
export PS1

#-------------------------------------------------------------
# HISTORY COMPLETION
#-------------------------------------------------------------
bind '"\e[A": history-search-backward'
bind '"\e[B": history-search-forward'

#-------------------------------------------------------------
# Use Vi emulation unless in Emacs
#-------------------------------------------------------------
if [ -n "$INSIDE_EMACS" ]; then
  set -o emacs
else
  set -o vi
fi

[[ -f $HOME/.anaconda/etc/profile.d/conda.sh ]] && \
    . "$HOME/.anaconda/etc/profile.d/conda.sh"

[[ -f $HOME/.bash_profile.local ]] && \
    . "$HOME/.bash_profile.local"

[[ -f $HOME/.fzf.bash ]] && \
    . "$HOME/.fzf.bash"

# shellcheck source=/dev/null
source "$HOME/.dotfiles/shell/path.sh"

# ------------------------------------------------------------------------
