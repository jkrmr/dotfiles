#!/usr/bin/env bash

#
# m-x
#
# Usage:
#   mx [SUBCOMMAND]
#
# A simplified wrapper over tmux and tmuxinator.
#
# Available subcommands:
#
#   [none]           -- Start either a currently running or tmuxinator-managed session
#   help             -- Displays this menu
#   list (ls)        -- List all running and available sessions
#
#   here (h)         -- Attach to a PWD-named session if it exists, else start and attach to it
#   kill (k)         -- Kill the given tmux session(s) and/or tmuxinator template(s)
#   new  (n) [NAME]  -- Start and switch to a new tmux session, randomly named if no name given
#
#   tmuxinator:
#
#   create (c) [NAME] -- Create a template
#   edit   (e)        -- Fuzzy-select a project file to edit
#   debug  (d)        -- Output the shell commands that are generated by tmuxinator
#

set -e

TMUXINATOR_TEMPLATES_HOME="${TMUXINATOR_TEMPLATES_HOME:-$HOME/.config/tmuxinator}"
FZF="fzf --ansi --layout=reverse --preview-window=right:65%"

usage() {
    grep '^#' < "$0" | tail -n +2 | cut -c 3-
}

BLUE="\e[0;34m"
BOLDBLK="\e[1;30m"
CYAN="\e[0;36m"
GREEN="\e[0;32m"
PURPLE="\e[0;35m"
RED="\e[0;31m"
RESET="\e[0m"
YELLOW="\e[33m"

TEMPLATE="${BOLDBLK}template${RESET}"
SESSION="${BLUE}session${RESET}"

running_tmux_sessions() {
    tmux list-sessions 2> /dev/null |\
        grep -v 'failed to connect' |\
        sed -E 's/(.+): .+/\1/'
}

tmuxinator_templates() {
    find "${TMUXINATOR_TEMPLATES_HOME}"/* 2>/dev/null |
        sed -E 's/.+\/(.+)\.ya?ml/\1/'
}

open_or_switch_to_session() {
    name="$(echo "$1" | sed -E 's/\s/\\\ /g')"

    if [[ -z "$TMUX" ]]; then
        echo tmux attach-session -t "$1"
        tmux attach-session -t "$name"
    else
        echo tmux switch-client -t "$1"
        tmux switch-client -t "$name"
    fi
}

tmux_dwim() {
    sessions="$(running_tmux_sessions)"
    templates="$(tmuxinator_templates)"
    [[ -z "$sessions" ]] && [[ -z "$templates" ]] && exit 0

    selections_list=""
    IFS=$'\n'
    for session in $sessions; do
      selections_list="$selections_list\n$SESSION\t\t$session"
    done

    for template in $templates; do
      selections_list="$selections_list\n$TEMPLATE\t$template"
    done
    unset IFS

    selections_list=$(echo -e "$selections_list" | sed '/^[[:space:]]*$/d')

    selection=$(echo "$selections_list" | $FZF --preview="mx-fzf-preview {+}")
    [[ -z "$selection" ]] && exit 0

    kind="$(echo "${selection}" | awk '{ print $1 }')"
    name="$(echo "${selection}" | sed -E 's/^\w+\s+(.+)$/\1/')"

    if [[ "$kind" == 'session' ]]; then
        open_or_switch_to_session "$name"
    elif [[ "$kind" == 'template' ]]; then
        echo tmuxinator start "$name"
        tmuxinator start "$name"
    else
        echo "Unfamiliar selection: $selection"
        exit 1
    fi
}

tmux_attach() {
    available_sessions="$(running_tmux_sessions)"
    [[ -z "$available_sessions" ]] && exit 0

    selection=$(echo "$available_sessions" | $FZF --preview="mx-fzf-preview 'session' {+}")
    [[ -z "$selection" ]] && exit 0
}

kill_session_or_template() {
    sessions="$(running_tmux_sessions)"
    templates="$(tmuxinator_templates)"
    [[ -z "$sessions" ]] && [[ -z "$templates" ]] && exit 0

    selections_list=""
    IFS=$'\n'
    for session in $sessions; do
      selections_list="$selections_list\n$SESSION\t\t$session"
    done

    for template in $templates; do
      selections_list="$selections_list\n$TEMPLATE\t$template"
    done
    unset IFS

    selections_list=$(echo -e "$selections_list" | sed '/^[[:space:]]*$/d')

    selection=$(echo "$selections_list" | $FZF --multi --preview="mx-fzf-preview {}")
    [[ -z "$selection" ]] && exit 0


    IFS=$'\n'
    for entry in $selection; do
        kind="$(echo $entry | awk '{ print $1 }')"
        name="$(echo $entry | sed -E 's/(session|template)\s+(.+)$/\2/')"

        printf "Terminating %s '%s'... " "$kind" "$name"

        if [[ "$kind" == 'session' ]]; then
            if [[ "$name" =~ $templates ]]; then
              tmuxinator stop "$name"
              printf "done. [tmuxinator stop %s]\n" "$name"
            else
              tmux kill-session -t "$name"
              printf "done. [tmux kill-session -t %s]\n" "$name"
            fi
        elif [[ "$kind" == 'template' ]]; then
            tmuxinator delete "$name"
            printf "done. [tmuxinator delete %s]\n" "$name"
        else
            printf "Unfamiliar selection: %s\n" "$entry"
        fi
    done
    unset IFS
}

tmux_status() {
    # list all running session and available tmuxinator templates
    sessions="$(running_tmux_sessions)"
    templates="$(tmuxinator_templates)"

    [[ -z "$sessions" ]] && [[ -z "$templates" ]] && exit 0

    if [ -n "$sessions" ]; then
        echo "Running Sessions"
        echo "----------------"
        echo "$sessions"
        echo
    fi

    if [ -n "$templates" ]; then
        echo "Available Templates"
        echo "-------------------"
        echo "$templates"
        echo
    fi

}

tmuxinator_fuzzy_select() {
    templates="$(tmuxinator_templates)"
    [[ -z "$templates" ]] && exit 0

    selection=$(echo "$templates" | $FZF --preview="mx-fzf-preview 'template' {+}" | sed 's/^ *//;s/ *$//')
    [[ -z "$selection" ]] && exit 0

    echo tmuxinator "$1" "$selection"
    tmuxinator "$1" "$selection"
}

while [ $# -gt -1 ]; do
    case "$1" in
        '-h'|'--help'|'help')
            usage | $PAGER
            exit 2
            ;;
        "")
            tmux_dwim
            exit 0
            ;;
        'here'|'h')
            tmux-attach-or-create
            exit 0
            ;;
        'kill'|'k')
            kill_session_or_template
            exit 0
            ;;
        'new'|'n')
            name="${*:2}"

            if [[ -n "$name" ]]; then
                tmux-attach-or-create "$name"
            else
                tmux-attach-or-create "$(random-phrase)"
            fi

            exit 0
            ;;
        'create'|'c')
            [[ -z "$2" ]] && echo "Usage: mx create [TEMPLATE_NAME]" && exit 1

            echo "Generate from a running session? (y/n)"
            read generate

            if [[ "$generate" == "y" ]]; then
                available_sessions="$(running_tmux_sessions)"

                selection=$(echo "$available_sessions" | $FZF --preview="mx-fzf-preview 'session' {+}")
                [[ -z "$selection" ]] && exit 0

                tmuxinator new "$2" "$selection"
                tmuxinator edit "$2"
            fi

            if [[ "$generate" == "n" ]]; then
                tmuxinator new "$2"
            fi

            exit 0
            ;;
        'list'|'ls')
            tmux_status
            exit 0
            ;;
        'debug'|'d'|'edit'|'e')
            tmuxinator_fuzzy_select "$1"
            exit 0
            ;;
        *)
            (>&2 echo "Unrecognized argument: $1")
            exit 1
            ;;
    esac
done
