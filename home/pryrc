# -*- mode: ruby -*-
# vi:syntax=ruby
# frozen_string_literal: true

# rubocop:disable Style/MixinUsage

# Return only the methods not present on basic objects
# alternatively, use `ls <object> -m`
class Object
  def method_list
    (methods - Object.instance_methods).sort
  end
end

unless defined?(Rails) && Rails.env
  begin
    require "jazz_fingers"
  rescue LoadError
    puts "jazz_fingers not loaded."
  end
end

if defined?(Rails)
  begin
    require "factory_bot_rails"
    include FactoryBot::Syntax::Methods
  rescue LoadError
    puts "FactoryBot not loaded."
  end
end

if defined?(Rails)
  def url_helpers
    include Rails.application.routes.url_helpers
    default_url_options[:host] = ENV["BASE_URL"]
  end
end

# Format stacktraces
Pry.config.exception_handler = proc do |output, exception, _|
  output.puts "#{exception.class}: #{exception.message}"
  exception.backtrace.each do |bt|
    puts "\tfrom: #{bt}"
    break if bt =~ /^\(pry\)/
  end
end

# Aliases for common commands
Pry.commands.alias_command "q", "exit"
Pry.commands.alias_command "!!", "disable-pry"
Pry.commands.alias_command "w", "whereami"
Pry.commands.alias_command "sh", "shell-mode"
Pry.commands.alias_command "ss", "show-source"

if defined?(PryByebug)
  Pry.commands.alias_command "c", "continue"
  Pry.commands.alias_command "s", "step"
  Pry.commands.alias_command "n", "next"
  Pry.commands.alias_command "f", "finish"
end

if defined?(AwesomePrint)
  AwesomePrint.defaults = { indent: -2 }
  AwesomePrint.pry!
end

if defined?(Hirb)
  Hirb.enable
  extend Hirb::Console
end

Pry.config.color = true

if defined?(JazzFingers)
  JazzFingers.configure do |config|
    config.colored_prompt = true
    config.application_name = ENV["USER"] unless defined?(Rails)
  end
end

if ENV["TERM"] == "emacs" || !ENV["INSIDE_EMACS"].nil?
  Pry.config.pager = false
  Pry.config.auto_indent = false
  Pry.prompt = Pry::Prompt[:default][:value]
else
  Pry.config.pager = true
  Pry.config.auto_indent = true
  Pry.config.theme = "solarized"
end

def timeit
  starting = Process.clock_gettime(Process::CLOCK_MONOTONIC)
  yield if block_given?
  ending = Process.clock_gettime(Process::CLOCK_MONOTONIC)
  (ending - starting).round(4)
end

pryrc_local = File.expand_path("~/.pryrc.local")
load(pryrc_local) if File.exist?(pryrc_local)

# rubocop:enable Style/MixinUsage
