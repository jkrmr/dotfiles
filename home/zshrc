#!/usr/bin/env bash

# shellcheck disable=SC1090
# SC1090: Can't follow non-constant source.
#         Use a directive to specify location.

#-------------------------------------------------------------
# ALIASES: Editors, Tmux
#-------------------------------------------------------------
# nvim
alias vim=nvim
alias vim0='vim -u NONE'
alias vim1='vim -u ~/.vim/minimal.vim'
alias vimplug='vim +PlugInstall +PlugUpgrade +PlugUpdate +qall'

# vim
alias vi='mvim -v'
alias vi0='vi -u NONE'
alias vi1='vi -u ~/.vim/minimal.vim'
alias viplug='vi +PlugInstall +PlugUpgrade +PlugUpdate +qall'

alias b=bundle
alias be='bundle exec'
alias cat=bat
alias dc='docker compose'
alias git=hub
alias music=mpsyt
alias pp=pretty-print-path

#-------------------------------------------------------------
# ALIASES: FILE MANAGEMENT, SHELL NAVIGATION
#-------------------------------------------------------------
alias ..='\cd ..; l'     # go to parent dir and list contents
alias ...='\cd ../..; l' # go to grandparent dir and list contents
alias mkdir='mkdir -p'   # create subdirectories as necessary
alias h='history'        # show history
alias d='dirs -v'        # show directory stack
alias ls='exa'
alias l='ls'
alias lla='ls -al'

#-------------------------------------------------------------
# ALIASES: SAFEGUARDS
#-------------------------------------------------------------
alias rm='rm -i'  # confirm deletion
alias mv='mv -i'  # confirm move if overwriting existing file
alias cp='cp -i'  # confirm copy if overwriting existing file
alias ln='ln -iv' # display error if link exists; link verbosely

#-------------------------------------------------------------
# ALIASES: MISC
#-------------------------------------------------------------
alias hide='setfile -a V'     # hide a file
alias unhide='setfile -a v'   # unhide a file
alias npmls='npm ls -depth=0'
alias grep='GREP_COLOR="33;40" LANG=C grep --color=auto'
alias ssh='TERM=xterm-256color ssh'

#-------------------------------------------------------------
# ALIASES: Postfix
#-------------------------------------------------------------
alias -g G='| grep --line-number --context=1' # grep w/ context
alias -g C="| pbcopy" # copy to clipboard
alias -g P='| less'   # send to pager

#-------------------------------------------------------------
# SYNTAX HIGHLIGHTING
#-------------------------------------------------------------
# BSD
export CLICOLOR=1
export LSCOLORS=exfxcxdxbxegedabagacad

# GNU
export LS_COLORS="di=00;34:ex=00;31:ln=00;32:or=00;35:mi=90;30"

#-------------------------------------------------------------
# EDITOR / PAGER
#-------------------------------------------------------------
export EDITOR="nvim"
export PAGER="less"

# brew install [or sudo apt-get install] source-highlight
export LESS=' --raw-control-chars --no-init --quit-if-one-screen'
export LESSOPEN="| /usr/local/bin/src-hilite-lesspipe.sh %s"

# pager search matches coloring
export LESS_TERMCAP_so=$'\E[30;43m' # black on yellow
export LESS_TERMCAP_se=$'\E[00;00m' # reset

#-------------------------------------------------------------
# MISC ENV VARIABLES
#-------------------------------------------------------------
export HISTCONTROL=ignoreboth   # Ignore spaces and duplicates
export HISTIGNORE="??:&:pwd:cd*:h:..*:l:ll:ll?:q:c:l:g"

#-------------------------------------------------------------
# FUNCTIONS
#-------------------------------------------------------------
# create dir $1 and cd into it, creating subdirectories as necessary
md() {
  directory_name="${*// /-}"
  mkdir -p "$directory_name"
  cd "$directory_name" || return
}

# Mac-specific: show and hide hidden files
hidden_files() {
  if [[ $1 != "hide" && $1 != "show" ]]; then
    echo "Usage: hidden_files [show|hide]"; return 1;
  fi
  if [[ $1 == "hide" ]]; then
    local view=false;
  elif [[ $1 == "show" ]]; then
    local view=true;
  fi
  defaults write com.apple.finder AppleShowAllFiles $view;
  killall Finder;
}

del() {
  echo -n "del: trash the selected files/directories? "
  # shellcheck disable=SC2162
  read dir

  if [[ $dir =~ ^[yY](es)?$ ]]; then
    echo "mv -t ~/.Trash/ $*"
    mv -t ~/.Trash/ "$@"
  else
    echo "Canceling with no changes made."
  fi
}

diff() {
    [[ -n "${1}" ]] && [[ -n "${2}" ]] || return
    /usr/local/bin/diff -u "${1}" "${2}" | delta
}

binstubs() {
  bundle install --binstubs .bundle/bin
}

#-------------------------------------------------------------
# Git
#-------------------------------------------------------------
# No arguments: `git status`
# With arguments: acts like `git`
g() {
  if [[ $# -gt 0 ]]; then
    git "$@"
  else
    \git status -sb
  fi
}

#-------------------------------------------------------------
# COLORIZED GIT PROMPT
#-------------------------------------------------------------
git_color() {
  clean='working (directory|tree) clean'
  ahead_of_remote="Your branch is ahead of"
  applying_patch="Unmerged"

  if [[ $git_status =~ $clean ]]; then
    if [[ $git_status =~ $ahead_of_remote ]]; then
      echo -ne "$(color yellow)"
    else
      echo -ne "$(color green)"
    fi
  elif [[ $git_status =~ $applying_patch ]]; then
    echo -ne "$(color violet)"
  else
    echo -ne "$(color red)"
  fi
}

git_branch() {
  git_status="$(\git status 2> /dev/null)"
  is_on_branch='^On branch ([^[:space:]]+)'
  is_on_commit='HEAD detached at ([^[:space:]]+)'
  is_rebasing="rebasing branch '([^[:space:]]+)' on '([^[:space:]]+)'"

  if [[ $git_status =~ $is_on_branch ]]; then
    branch=${BASH_REMATCH[1]:-${match[1]}} # bash/zsh portable
    if [[ $git_status =~ "Unmerged paths" ]]; then
      git_color && echo -n "merging into $branch "
    else
      git_color && echo -n "$branch "
    fi
  elif [[ $git_status =~ $is_on_commit ]]; then
    commit=${BASH_REMATCH[1]:-${match[1]}}
    git_color && echo -n "$commit "
  elif [[ $git_status =~ $is_rebasing ]]; then
    branch=${BASH_REMATCH[1]:-${match[1]}}
    commit=${BASH_REMATCH[2]:-${match[2]}}
    git_color && echo -n "rebasing $branch on $commit "
  fi
}

#-------------------------------------------------------------
# ZSH
#-------------------------------------------------------------
# GENERAL
#-------------------------------------------------------------
alias reload!="source ~/.zshenv"
setopt extendedglob # Enable extended globbing
unsetopt nomatch    # Allow [ or ] wherever you want
autoload -U zmv     # rename files like zmv '(*).txt' '$1.html'


#-------------------------------------------------------------
# DIRECTORY STACK  (see http://j.mp/1lOiWio)
#-------------------------------------------------------------
setopt autocd autopushd pushd_minus pushd_silent
setopt pushd_to_home cdable_vars pushd_ignore_dups
export DIRSTACKSIZE=10

#-------------------------------------------------------------
# HISTORY SETTINGS
#-------------------------------------------------------------
setopt hist_ignore_all_dups inc_append_history
export HISTFILE=$HOME/.zhistory
export HISTSIZE=4096
export SAVEHIST=4096

#-------------------------------------------------------------
# Zsh Plugins (load last)
#-------------------------------------------------------------

if [[ -z "$INSIDE_EMACS" ]]; then
    . "$HOME/.zsh/zsh-vim-mode/zsh-vim-mode.plugin.zsh"
fi

. "$HOME/.zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"

#-------------------------------------------------------------
# CURSOR POSITIONING
#-------------------------------------------------------------
# Position cursor after ARG[0] (for argument/flag entry)
after-first-word() {
    zle beginning-of-line
    zle forward-word
}

zle -N after-first-word

#-------------------------------------------------------------
# vi / emacs modes
#-------------------------------------------------------------
if [[ -z "$INSIDE_EMACS" ]]; then
    # Change cursor shape for different vi modes.
    zle-keymap-select() {
        if [[ ${KEYMAP} == vicmd ]] ||
            [[ $1 = 'block' ]]; then
            echo -ne '\e[1 q'
        elif [[ ${KEYMAP} == main ]] ||
                [[ ${KEYMAP} == viins ]] ||
                [[ ${KEYMAP} = '' ]] ||
                [[ $1 = 'beam' ]]; then
            echo -ne '\e[5 q'
        fi
    }

    zle -N zle-keymap-select

    # no lag after pressing ESC to enter normal mode
    export KEYTIMEOUT=5

    # set vi keybindings
    bindkey -v

    echo -ne '\e[5 q' # Use beam shape cursor on startup.
    preexec() { echo -ne '\e[5 q'; } # Use beam shape cursor for each new prompt.
fi

#-------------------------------------------------------------
# HISTORY SEARCH
#-------------------------------------------------------------
# back-i-search should begin with the current word
setopt complete_in_word

autoload -U down-line-or-beginning-search
autoload -U up-line-or-beginning-search
zle -N down-line-or-beginning-search
zle -N up-line-or-beginning-search

#-------------------------------------------------------------
# Use ctrl-z as a toggle
#-------------------------------------------------------------

ctrlz() {
    if [[ $#BUFFER -eq 0 ]]; then
        fg >/dev/null 2>&1 && zle redisplay
    else
        zle push-input
    fi
}

zle -N ctrlz

#-------------------------------------------------------------
# Use cd with pd
#-------------------------------------------------------------
cd() {
    builtin cd "$(pd "$1")" || return
}

#-------------------------------------------------------------
# Use FZF to set versions with ASDF
#-------------------------------------------------------------
asdf-fzf() {
    BUFFER=$(asdf-select)
    zle end-of-line
}

zle -N asdf-fzf

#-------------------------------------------------------------
# KEY MAPS
#-------------------------------------------------------------
# zle defs

zle -N fzf-file-widget
zle -N prefix-2

# all modes

bindkey "^[[3"  prefix-2         # ensure delete backwards deletes
bindkey "^[[3~" delete-char      # ensure delete forwards deletes
bindkey "^\\"   asdf-fzf
bindkey "^t"    fzf-file-widget  # invoke FZF file finder
bindkey "^x"    after-first-word # move cursor to flag-insert position
bindkey "^z"    ctrlz

# string-based

bindkey -s "^h" "cd\n" # cd with pd

# emacs mode

bindkey -M emacs '^y' accept-and-hold
bindkey -M emacs '^o' push-line-or-edit

# vi insert mode

bindkey -M viins '^a' beginning-of-line
bindkey -M viins '^b' backward-char
bindkey -M viins '^d' delete-char
bindkey -M viins '^e' end-of-line
bindkey -M viins '^f' forward-char
bindkey -M viins '^k' kill-line
bindkey -M viins '^n' down-line-or-beginning-search
bindkey -M viins '^o' push-line-or-edit  # stash command, issue another, restore stash
bindkey -M viins '^p' up-line-or-beginning-search
bindkey -M viins '^r' history-incremental-search-backward
bindkey -M viins '^y' accept-and-hold    # issue the command, but keep it at the prompt

# vi command mode

bindkey -M vicmd '^n' down-line-or-beginning-search
bindkey -M vicmd '^p' up-line-or-beginning-search
bindkey -M vicmd '^r' history-incremental-search-backward

# arrow keys trigger history searching

bindkey '\e[A' up-line-or-beginning-search
bindkey '\e[B' down-line-or-beginning-search
bindkey -s '\eOA' '\e[A'
bindkey -s '\eOB' '\e[B'

#-------------------------------------------------------------
# COLORS
#-------------------------------------------------------------
autoload -U colors && colors

color() {
    # shellcheck disable=SC2154
    [[ $1 == 'red'    ]] && printf "%s" "%{${fg_no_bold[red]}%}"
    [[ $1 == 'yellow' ]] && printf "%s" "%{${fg_no_bold[yellow]}%}"
    [[ $1 == 'green'  ]] && printf "%s" "%{${fg_no_bold[green]}%}"
    [[ $1 == 'violet' ]] && printf "%s" "%{${fg_no_bold[magenta]}%}"
    [[ $1 == 'blue'   ]] && printf "%s" "%{${fg_no_bold[blue]}%}"
    [[ $1 == 'white'  ]] && printf "%s" "%{${fg_no_bold[white]}%}"
    # shellcheck disable=SC2154
    [[ $1 == 'reset'  ]] && printf "%s" "%{${reset_color}%}"
}

#-------------------------------------------------------------
# PROMPT WITH SHORT PWD, COLORIZED GIT INFO
#-------------------------------------------------------------
setopt prompt_subst       # enables command substitution

PS1=$'\n$(color blue)%c ' # basename of pwd after a newline
PS1+='$(git_branch)'      # current branch or commit name, with color
PS1+='$(color reset)%# '  # reset color, add %
export PS1

#-------------------------------------------------------------
# UNDO (DISABLE ZSH DEFAULTS)
#-------------------------------------------------------------
disable r # disable zsh's r

#-------------------------------------------------------------
# Autocompletion setup scripts
#-------------------------------------------------------------

[[ -f "$HOME/Library/Caches/heroku/autocomplete/zsh_setup" ]] && \
    . "$HOME/Library/Caches/heroku/autocomplete/zsh_setup"

[[ -f "$HOME/.anaconda/etc/profile.d/conda.sh" ]] && \
    . "$HOME/.anaconda/etc/profile.d/conda.sh"

[[ -f "$HOME/.fzf.zsh" ]] && \
    . "$HOME/.fzf.zsh"

[[ -f "$HOMEBREW_PREFIX/opt/asdf/asdf.sh" ]] && \
    . "$HOMEBREW_PREFIX/opt/asdf/asdf.sh"

[[ -f "$HOME/.config/tabtab/__tabtab.zsh" ]] && \
    . "$HOME/.config/tabtab/__tabtab.zsh"

#-------------------------------------------------------------
# COMMAND COMPLETION
#-------------------------------------------------------------
shared="$HOMEBREW_PREFIX/share"

# shellcheck disable=SC2206
fpath=(
  "$HOME/.zsh/completion"
  "$shared/zsh-completions"
  "$shared/zsh/site-functions"
  $fpath
)

autoload -U compinit && compinit
source "$shared/zsh/site-functions/_aws"

compdef git=hub
compdef g=git

#-------------------------------------------------------------

[[ -f "$HOME/.zshrc.local" ]] && \
    . "$HOME/.zshrc.local"

# shellcheck source=/dev/null
source "$HOME/.dotfiles/shell/path.sh"

#-------------------------------------------------------------

